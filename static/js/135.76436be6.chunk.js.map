{"version":3,"file":"static/js/135.76436be6.chunk.js","mappings":"8PACA,EAA4B,gCAA5B,EAAwE,gCAAxE,EAAiH,6BAAjH,EAA6J,mC,SCkL7J,EAlDqB,WACnB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEKC,EAAAA,EAAAA,IAAgBP,GAFrB,OAEbQ,EAFa,OAGnBJ,EAASI,GAHU,gDAKnBC,QAAQC,MAAM,gCAAd,MALmB,yDAAH,qDASpBJ,GACD,GAAE,CAACN,KAGF,iBAAKW,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,gBACEC,IAAG,yCAAoCV,EAAMW,aAC7CC,IAAKZ,EAAMa,MACXL,UAAWC,KAEb,iBAAKD,UAAWC,EAAhB,WACE,wBAAKT,EAAMa,SACX,uBAAIb,EAAMc,YACV,0CAAkBd,EAAMe,iBACxB,oCAAYf,EAAMgB,uBAGtB,0BACE,0BACE,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAE,OAAR,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAE,UAAR,+BAKR,SAAC,KAAD,KACA,SAAC,KAAD,CAAMA,GAAG,IAAT,4BAGL,C,sLC5KKC,EAAS,mCAAG,WAAMC,GAAN,kGAESC,MAAM,+BAAD,OACKD,EADL,oBALhB,qCAGE,WAERE,EAFQ,QAKAC,GALA,sBAMN,IAAIC,MAAJ,sCAAyCF,EAASG,SAN5C,uBAQKH,EAASI,OARd,cAQRC,EARQ,yBASPA,GATO,wCAWdpB,QAAQC,MAAM,aAAd,MAXc,+DAAH,sDAiBFoB,EAAiB,mCAAG,uGACxBT,EAAU,wBADc,2CAAH,qDAKjBU,EAAY,mCAAG,WAAMC,GAAN,0FACnBX,EAAU,uBAAD,OAAwBW,KADd,2CAAH,sDAKZzB,EAAe,mCAAG,WAAMP,GAAN,0FACtBqB,EAAU,UAAD,OAAWrB,KADE,2CAAH,sDAKfiC,EAAe,mCAAG,WAAMjC,GAAN,0FACtBqB,EAAU,UAAD,OAAWrB,EAAX,cADa,2CAAH,sDAKfkC,EAAe,mCAAG,WAAMlC,GAAN,0FACtBqB,EAAU,UAAD,OAAWrB,EAAX,cADa,2CAAH,qD,sBC1C5B,SAASmC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOlC,GAEP,YADA4B,EAAO5B,EAET,CAEIiC,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOG,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["webpack://react-homework-template/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/api.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MovieDetails_container__Ys+c9\",\"movieInfo\":\"MovieDetails_movieInfo__4EKMk\",\"poster\":\"MovieDetails_poster__yO7gD\",\"movieDetails\":\"MovieDetails_movieDetails__EbgQo\",\"castList\":\"MovieDetails_castList__+xtcs\",\"reviewList\":\"MovieDetails_reviewList__hFq4S\",\"reviewItem\":\"MovieDetails_reviewItem__EnMPI\",\"backButton\":\"MovieDetails_backButton__pPF5M\"};","// MovieDetails.js\n/*import React, { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport {\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n} from '../../services/api';\nimport styles from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        const castData = await getMovieCredits(movieId);\n        const reviewsData = await getMovieReviews(movieId);\n\n        setMovie(movieData);\n        setCast(castData.cast);\n        setReviews(reviewsData.results);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieData();\n  }, [movieId]);\n  console.log(cast, reviews);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.movieInfo}>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n          alt={movie.title}\n          className={styles.poster}\n        />\n        <div className={styles.movieDetails}>\n          <h1>{movie.title}</h1>\n          <p>{movie.overview}</p>\n          <p>Release Date: {movie.release_date}</p>\n          <p>Rating: {movie.vote_average}</p>\n        </div>\n      </div>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to={`cast`}>Cast</Link>\n            </li>\n            <li>\n              <Link to={`reviews`}>Reviews</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      <Outlet />\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n  );\n};\nexport default MovieDetails;*/\n// src/pages/MovieDetails/MovieDetails.jsx\n/*import React, { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from '../../services/api'; // Importuj funkcję do pobierania szczegółowych informacji o filmie\nimport styles from './MovieDetails.module.css'; // Zaimportuj odpowiedni styl CSS\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        setMovie(movieData);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieData();\n  }, [movieId]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.movieInfo}>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n          alt={movie.title}\n          className={styles.poster}\n        />\n        <div className={styles.movieDetails}>\n          <h1>{movie.title}</h1>\n          <p>{movie.overview}</p>\n          <p>Release Date: {movie.release_date}</p>\n          <p>Rating: {movie.vote_average}</p>\n        </div>\n      </div>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to={`cast`}>Cast</Link>\n            </li>\n            <li>\n              <Link to={`reviews`}>Reviews</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      <Outlet />\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n  );\n};\nexport default MovieDetails;*/\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link, Outlet } from 'react-router-dom';\nimport { getMovieDetails } from '../../services/api'; // Importuj funkcję do pobierania szczegółowych informacji o filmie\nimport styles from './MovieDetails.module.css'; // Zaimportuj odpowiedni styl CSS\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const movieData = await getMovieDetails(movieId);\n        setMovie(movieData);\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieData();\n  }, [movieId]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.movieInfo}>\n        <img\n          src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n          alt={movie.title}\n          className={styles.poster}\n        />\n        <div className={styles.movieDetails}>\n          <h1>{movie.title}</h1>\n          <p>{movie.overview}</p>\n          <p>Release Date: {movie.release_date}</p>\n          <p>Rating: {movie.vote_average}</p>\n        </div>\n      </div>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to={`cast`}>Cast</Link>\n            </li>\n            <li>\n              <Link to={`reviews`}>Reviews</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      <Outlet />\n      <Link to=\"/\">Back to Home</Link>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","// services/api.js\n\nconst API_KEY = '904ef6f007cb228dd6ac008b3d697336';\n\n// Funkcja do wykonania zapytania GET na podstawie podanego endpointu\nconst fetchData = async endpoint => {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3${endpoint}?api_key=${API_KEY}`\n    );\n    if (!response.ok) {\n      throw new Error(`Request failed with status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Funkcja do pobierania listy najpopularniejszych filmów\nexport const getTrendingMovies = async () => {\n  return fetchData('/trending/movie/day');\n};\n\n// Funkcja do wyszukiwania filmów po słowie kluczowym\nexport const searchMovies = async query => {\n  return fetchData(`/search/movie?query=${query}`);\n};\n\n// Funkcja do pobierania szczegółowych informacji o filmie na podstawie movieId\nexport const getMovieDetails = async movieId => {\n  return fetchData(`/movie/${movieId}`);\n};\n\n// Funkcja do pobierania informacji o zespole aktorskim na podstawie movieId\nexport const getMovieCredits = async movieId => {\n  return fetchData(`/movie/${movieId}/credits`);\n};\n\n// Funkcja do pobierania recenzji filmu na podstawie movieId\nexport const getMovieReviews = async movieId => {\n  return fetchData(`/movie/${movieId}/reviews`);\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","movie","setMovie","useEffect","fetchMovieData","getMovieDetails","movieData","console","error","className","styles","src","poster_path","alt","title","overview","release_date","vote_average","to","fetchData","endpoint","fetch","response","ok","Error","status","json","data","getTrendingMovies","searchMovies","query","getMovieCredits","getMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}